// Code generated by MockGen. DO NOT EDIT.
// Source: harga_detail_produk_usecase.go

// Package mock_produk is a generated GoMock package.
package mock_produk

import (
	context "context"
	reflect "reflect"

	produk "github.com/be-sistem-informasi-konveksi/common/request/produk/harga_detail"
	entity "github.com/be-sistem-informasi-konveksi/entity"
	gomock "github.com/golang/mock/gomock"
)

// MockHargaDetailProdukUsecase is a mock of HargaDetailProdukUsecase interface.
type MockHargaDetailProdukUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockHargaDetailProdukUsecaseMockRecorder
}

// MockHargaDetailProdukUsecaseMockRecorder is the mock recorder for MockHargaDetailProdukUsecase.
type MockHargaDetailProdukUsecaseMockRecorder struct {
	mock *MockHargaDetailProdukUsecase
}

// NewMockHargaDetailProdukUsecase creates a new mock instance.
func NewMockHargaDetailProdukUsecase(ctrl *gomock.Controller) *MockHargaDetailProdukUsecase {
	mock := &MockHargaDetailProdukUsecase{ctrl: ctrl}
	mock.recorder = &MockHargaDetailProdukUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHargaDetailProdukUsecase) EXPECT() *MockHargaDetailProdukUsecaseMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockHargaDetailProdukUsecase) Create(ctx context.Context, reqHargaDetailProduk produk.Create) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, reqHargaDetailProduk)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockHargaDetailProdukUsecaseMockRecorder) Create(ctx, reqHargaDetailProduk interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockHargaDetailProdukUsecase)(nil).Create), ctx, reqHargaDetailProduk)
}

// Delete mocks base method.
func (m *MockHargaDetailProdukUsecase) Delete(ctx context.Context, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockHargaDetailProdukUsecaseMockRecorder) Delete(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockHargaDetailProdukUsecase)(nil).Delete), ctx, id)
}

// DeleteByProdukId mocks base method.
func (m *MockHargaDetailProdukUsecase) DeleteByProdukId(ctx context.Context, produkId string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteByProdukId", ctx, produkId)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteByProdukId indicates an expected call of DeleteByProdukId.
func (mr *MockHargaDetailProdukUsecaseMockRecorder) DeleteByProdukId(ctx, produkId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteByProdukId", reflect.TypeOf((*MockHargaDetailProdukUsecase)(nil).DeleteByProdukId), ctx, produkId)
}

// GetByProdukId mocks base method.
func (m *MockHargaDetailProdukUsecase) GetByProdukId(ctx context.Context, reqHargaDetailProduk produk.GetByProdukId) ([]entity.HargaDetailProduk, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByProdukId", ctx, reqHargaDetailProduk)
	ret0, _ := ret[0].([]entity.HargaDetailProduk)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByProdukId indicates an expected call of GetByProdukId.
func (mr *MockHargaDetailProdukUsecaseMockRecorder) GetByProdukId(ctx, reqHargaDetailProduk interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByProdukId", reflect.TypeOf((*MockHargaDetailProdukUsecase)(nil).GetByProdukId), ctx, reqHargaDetailProduk)
}

// UpdateById mocks base method.
func (m *MockHargaDetailProdukUsecase) UpdateById(ctx context.Context, reqHargaDetailProduk produk.Update) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateById", ctx, reqHargaDetailProduk)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateById indicates an expected call of UpdateById.
func (mr *MockHargaDetailProdukUsecaseMockRecorder) UpdateById(ctx, reqHargaDetailProduk interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateById", reflect.TypeOf((*MockHargaDetailProdukUsecase)(nil).UpdateById), ctx, reqHargaDetailProduk)
}
